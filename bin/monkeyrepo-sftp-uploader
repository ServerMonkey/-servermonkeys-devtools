#!/bin/sh
#info: Upload a fastpkg repo to a sftp-only server, uses the 'pass' tool

fail_if_undefined() {
	if [ -z "$1" ]; then
		echo "error, variable '$2' is unset or empty, run export before."
		echo "Example: export $2=\"my_data_here\""
		exit 1
	fi
}

require_app() {
	if [ -z "$(command -v "$1")" ]; then
		echo "$1 not installed. Install to make this script work."
		exit 1
	fi
}

error() {
	echo "error, aborting"
	exit 1
}

### MAIN ######################################################################

# verify
fail_if_undefined "$MRSU_SRC" "MRSU_SRC"
fail_if_undefined "$MRSU_USER" "MRSU_USER"
fail_if_undefined "$MRSU_SERVER" "MRSU_SERVER"
fail_if_undefined "$MRSU_PASS_PATH" "MRSU_PASS_PATH"
require_app dir2html
require_app pass
require_app sshpass

# verify source folder
if [ ! -d "$MRSU_SRC" ]; then
	echo "$MRSU_SRC does not exist or not a folder"
	exit 1
fi

# change to workdir
cd "$MRSU_SRC" || error

# copy fastpkg repo if it exists
if [ -n "$MRSU_FASTPKG" ]; then
	if [ ! -f "$MRSU_FASTPKG" ]; then
		echo "$MRSU_FASTPKG does not exist or is not a file"
		exit 1
	fi
	cp "$MRSU_FASTPKG" packages.csv || error
	# always create and index for fastpkg
	echo "Creating index.html for fastpkg"
	dir2html "fastpkg repo" || error
# create a HTML index
else
	# looks like a debian repo
	if [ -f "Packages" ] && [ -f "Release" ]; then
		echo "Creating index.html for Debian"
		dir2html "debian repo" || error
	# unknown repo
	else
		echo "Creating index.html for generic repo"
		dir2html "repo" || error
	fi
fi

# get sftp password
LFTP_PASSWORD=$(pass show "$MRSU_PASS_PATH") || error

# LFTP_PASSWORD is a custom env variable read by lftp
export LFTP_PASSWORD

lftp --env-password "sftp://$MRSU_USER@$MRSU_SERVER" -e \
	"mirror --reverse --only-newer $MRSU_SRC $BASE_PATH; bye" || error

# Destroy password after use
export LFTP_PASSWORD=""

echo "Done"
